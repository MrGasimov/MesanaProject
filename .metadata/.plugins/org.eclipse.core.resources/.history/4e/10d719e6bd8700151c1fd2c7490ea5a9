package com.corvolution.cm2;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.CopyOnWriteArrayList;

import javax.swing.event.EventListenerList;



public class ConnectionManager {
	private Vector<SensorListener> sensorListeners;
	public static boolean state;
	private SensorEvent sensorEvent;
	public static int numberOfConnectedSensors;
	private static List<Sensor>sensorList = new CopyOnWriteArrayList<>();
	private static String sensorPath;
	

		/** Register a listener for SunEvents */
	  synchronized public void addSunListener(SensorListener listener) {
	    if (sensorListeners == null)
	    	sensorListeners = new Vector<>();
	    	sensorListeners.addElement(listener);
	  }  

	  /** Remove a listener for SunEvents */
	  synchronized public void removeSunListener(SensorListener listener) {
	    if (sensorListeners == null)
	    	sensorListeners = new Vector<>();
	    	sensorListeners.removeElement(listener);
	  }
	 	
	  
	  private synchronized void _fireMoodEvent() {
	        sensorEvent = new SensorEvent(this,state,sensorPath);
	        Iterator<SensorListener> sensorListeners = sensorListeners.iterator();
	        for(SensorListener listener:sensorListeners)
	        for (int i = 0; i<numListeners; i+=2) 
	        {
	             if (listeners[i]==SensorListener.class) 
	             {
	                  // pass the event to the listeners event dispatch method
	                   ((SensorListener)listeners[i+1]).sensorConnected(e);;
	             }            
	        }
	    }
	
	
	public static  void setState(boolean status){
		state = status;
	}	
	public static boolean getState(){
		return state;
	}	
	public static void setCounter(int count){
		numberOfConnectedSensors = count;
	}	
	public static int getCounter(){
		return numberOfConnectedSensors;
	}	
	
	//adds connected sensor path to array 
	public static void addSensorToList(String path) throws IOException{
		Sensor sensor = new Sensor(path);
		sensorList.add(sensor);
		
	}
	//deletes disconnected sensor from array
	public static void removeSensorFromList(String path){
		for(Sensor device:sensorList){
			if(device.getSensorPath().equals(path))
					sensorList.remove(device);
		}				
	}
		
	//starts thread for listening and notifies Manager about any connection
	public void startListener(){
		Thread sensorListener = new Thread(new ConnectionListener());
		sensorListener.start();
	}
	
	//returns list of connected sensors
	public static List<Sensor> getConnectedSensorsList(){
		return sensorList;
	}	
	

	public static Sensor currentSensor(int i){
			
		return sensorList.get(i);
	}
	
	
	//sum of all connected sensors mearuementData
	public static long measurementDataSize(String option){
		long dataSize = 0; 
		if(option.equalsIgnoreCase("all")){
			for(Sensor device:sensorList){
				dataSize += device.getSizeOfData();			
			}
		} else if(option.equalsIgnoreCase("single")){
			dataSize += sensorList.get(0).getSizeOfData();
		}
	
		return dataSize;
	}

	
}