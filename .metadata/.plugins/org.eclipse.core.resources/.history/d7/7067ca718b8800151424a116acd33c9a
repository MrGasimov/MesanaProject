package com.corvolution.mesana.gui;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import org.apache.commons.io.FileUtils;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.ProgressBar;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import com.corvolution.cm2.UsbListener;
import com.corvolution.cm2.ConnectionManager;
import com.corvolution.cm2.Sensor;
import com.corvolution.cm2.SensorEvent;
import com.corvolution.cm2.SensorListener;
import com.corvolution.mesana.configurator.ConfigSensor;
import com.corvolution.mesana.configurator.GuiUpdater;
import com.corvolution.mesana.data.Measurement;
import com.corvolution.mesana.data.MeasurementCollection;
import com.corvolution.mesana.rest.RestApiConnector;

public class ReaderGui{
	int destSize, copySize,size;

	private Display display;
	private Shell shell;
	private Button button;
	private ProgressBar bar;
	private GridData gridData;
	private static Text text;
	public static Thread listen; 
	ConnectionManager manager;
	MeasurementCollection mCollect;
	private String measurementName;
	
	public ReaderGui(){
		manager = new ConnectionManager();
		mCollect = new MeasurementCollection();
		mCollect.setList();
		display = new Display();
		
		shell = new Shell(display, SWT.CLOSE | SWT.TITLE | SWT.MIN);
		shell.setText("Sensor Reader");
		GridLayout layout = new GridLayout(1, false);
		shell.setLayout(layout);
			
		text = new Text(shell, SWT.READ_ONLY | SWT.SINGLE | SWT.BORDER);
		gridData = new GridData();
		gridData.horizontalAlignment = GridData.FILL;
		gridData.verticalAlignment = GridData.FILL;		
		gridData.grabExcessHorizontalSpace = true;
		gridData.grabExcessVerticalSpace = false;
		gridData.horizontalSpan = 1;
		gridData.verticalSpan = 1;
		text.setLayoutData(gridData);
		
		bar = new ProgressBar(shell, SWT.SMOOTH);
		button = new Button(shell,SWT.PUSH);
		button.setText("Readout");
		gridData = new GridData();
		gridData.verticalAlignment = GridData.CENTER;
		gridData.horizontalAlignment = GridData.CENTER;
		gridData.widthHint = 100;
		gridData.heightHint = 30;
		gridData.grabExcessHorizontalSpace = true;
		gridData.grabExcessVerticalSpace = true;
		gridData.horizontalSpan = 1;
		gridData.verticalSpan = 1;
		button.setLayoutData(gridData);
		
		destSize=(int)FileUtils.sizeOf(new File("Z:/measurementData/"));

		button.addSelectionListener(new SelectionAdapter(){
			public void widgetSelected(SelectionEvent e){
				text.setText("Reading data from sensors...");				
				for(Sensor device:ConnectionManager.getConnectedSensorsList()){
					for(Measurement element :mCollect.getList()){
						element.getLinkId().equals(device.getConfiguration().getLinkId());
						measurementName = element.getID();
					};
					device.readMeasurementFromSensor("Z:/measurementData/", measurementName);		
					copySize =(int)FileUtils.sizeOf(new File("Z:/measurementData/"));
					size = (int) ConnectionManager.measurementDataSize("all");
					bar.setSelection((((copySize-destSize)/size)*100));										
					if(bar.getMaximum()==size)						
						break;									
				}
				text.setText("All sensors were read out!");
				text.setFocus();
				
			}
		});
		
		shell.pack();
		shell.open();			
		listen = new Thread(new Runnable(){			
			public void run(){			
					Display.getDefault().asyncExec(new Runnable() {
					    public void run() {	
					    	if(listen.isAlive()){
					    		if(!button.isFocusControl()){
						    		if(ConnectionManager.getState() || ConnectionManager.getCounter()!= 0){				    				
							    		text.setText(ConnectionManager.getCounter()+" sensors connected");							    		
							    	}else{
							    		text.setText("Please connect sensors");
							    		bar.setSelection(0);						    
							    	}
						    	}
					    	}else{
					    		
					    	}
					    	
					    	
						}
					});				
			System.out.println("method run executed");
			
			}			
		});
		
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch())
				display.sleep();
		}
		display.dispose();
	}

	
	public static class InnerClass implements SensorListener{
		@Override
		public void sensorConnection(SensorEvent e) {			
				Display.getDefault().asyncExec(new Runnable(){					
					@Override
					public void run() {
						if(e.getState()){
							text.setText("ok");
						}else{
							text.setText("not ok");
						}
						
					}
					
				});
				
		}
			
		}
		
	
	
	
	public Text getText(){
		return text;
	}
	
	
	public static void update()
	{
		
	}

	
	
	
	
	
	
	

}
